#!/usr/bin/perl -W
use strict;

my $mynet='NETWORK';
my $myif='lxc-bridge-nat';
# 
my @ips=['zero','bridge'];
local *DB;

if($#ARGV != 2){
    print "Usage: $0 <distro> <version> <containername>\n";
    exit(1);
}
# BIG NASTY PROBLEM HERE!!!
# If you go and remove a container, this algorithm for finding a new IP starts
# going and fucking up hard. It'll start taking IPs that are alerady allocated
# to other containers. So if you go and remove 10.0.0.2, but still have containers
# allocated to 10.0.0.3 and/or 10.0.0.4, it'll re-allocate one at .2 but 
# then start fucking up the ones at .3 and .4 on further runs of new-container -- 
# You need to figure out the perl to get this fixed
if(-e "/var/lib/lxc/ips"){
    # open the contents of this file into local DB
    open(DB,"/var/lib/lxc/ips");
    # defined evaluetes a boolean value telling whether EXPR has a value other than undef.
    # so <> is readline in perl... meaning if my ip = readline(db) is the evaluation here
    while(defined(my $ip=<DB>)){
        # print the ip address line
        print "$ip";
        # temporary value = split the expression $ip into a list of strings and return the
        # list in list context, split on commas
        # 10.0.19.2,container for example gets split into a array looking like (ip,container)
        my @TMP=split(/,/,$ip);
        # Further split the first result out by extracting the IP address and putting that
        # into a list
        @TMP=split(/\./,$TMP[0]);
        # We then assign the string value 'taken' to the 4th/last number in our ip ($TMP[3])
        $ips[$TMP[3]]='taken';
    }
    close(DB);
}
# Starts IP allocation values off at 2 (For example 10.0.0.2)
my $nextip=2; 
# While the list of ips == nextip
while(defined($ips[$nextip])){
    # Add one to this nextip value. Herein lies the bug we're facing. The issue happens
    # to be that we're not properly checking if that value is truly in use or not, and if
    # we run destroy-container on this shit, it ends in disaster because we don't have
    # any way to accomodate for this change in this part of the script.
    $nextip++;
}
if($nextip>254){
	print "More than 254 IPs in use, script assumes class-c, sorry\n"; exit(1); 
}
print "Next free IP: $mynet.$nextip\n";
if(-e "/var/lib/lxc/$ARGV[2]"){ print "Container $ARGV[2] already exists.\n"; exit(1); }
if not( -e "/var/lib/lxc/ips"){
	print "Creating lxc rootfs for first time, will take some time...\n";
}
print "Creating new container $ARGV[2] with OS $ARGV[1] $ARGV[0]:";
`lxc-create -n $ARGV[2] -t $ARGV[0] -- -r $ARGV[1]`;
print "Writing network config\n";
open(DB, ">> /var/lib/lxc/$ARGV[2]/config");
# here we echo into an lxc config value a bunch of shit, crucially the nextip gets inserted here
print DB "lxc.net.0.type = veth
lxc.net.0.flags = up
lxc.net.0.link = $myif
lxc.net.0.name = eth0
lxc.net.0.ipv4.address = $mynet.$nextip/24
lxc.net.0.ipv4.gateway = $mynet.1
lxc.include = /usr/share/lxc/config/debian.common.conf
";
close(DB);
open(DB, "> /var/lib/lxc/$ARGV[2]/rootfs/etc/network/interfaces");
print DB "
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet static
        address $mynet.$nextip
        netmask 255.255.255.0
        gateway $mynet.1
";
close(DB);
`echo nameserver $mynet.1 > /var/lib/lxc/$ARGV[2]/rootfs/etc/resolv.conf`;
`echo $mynet.$nextip,$ARGV[2] >> /var/lib/lxc/ips`;
print "Removing Systemd\n";
`lxc-start -d -n $ARGV[2]`;
`lxc-attach -n $ARGV[2] -- /usr/bin/apt-get update`;
`lxc-attach -n $ARGV[2] -- /usr/bin/apt-get install -y --no-install-recommends apt-utils`;
`lxc-attach -n $ARGV[2] -- /usr/bin/apt-get -y install sysvinit-core`;
`lxc-attach -n $ARGV[2] -- /usr/bin/cp /usr/share/sysvinit/inittab /etc/inittab`;
`lxc-stop -n $ARGV[2]`;
`lxc-start -d -n $ARGV[2]`;
`lxc-attach -n $ARGV[2] -- /usr/bin/apt-get -y remove --purge --auto-remove systemd*`;
print "Make sure it gets not reinstalled\n";
`echo 'Package: systemd\nPin: release *\nPin-Priority: -1' > /var/lib/lxc/$ARGV[2]/rootfs/etc/apt/preferences.d/systemd`;
print "Do you want to start this one at system boot? [y|N]:\n";
my $input = <STDIN>;
chomp $input;
if($input eq 'y'){
    print "Setting autostart for container\n";
    `echo lxc.start.auto = 1 >> /var/lib/lxc/$ARGV[2]/config`;
}
print "Add done. You can attach to $ARGV[2] with 'lxc-attach -n $ARGV[2]' now. Internal IP: $mynet.$nextip\n";
exit(0);
